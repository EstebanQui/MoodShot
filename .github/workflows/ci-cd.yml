name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: instagram_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Create .env.test file
        run: |
          echo "NODE_ENV=test" > .env.test
          echo "DATABASE_URL=postgresql://postgres:password@localhost:5432/instagram_db_test?schema=public" >> .env.test
          echo "NEXTAUTH_SECRET=test-secret-key-for-testing" >> .env.test
          echo "NEXTAUTH_URL=http://localhost:3000" >> .env.test
          echo "NEXT_PUBLIC_APP_URL=http://localhost:3000" >> .env.test
          echo "UPLOAD_DIR=./public/uploads" >> .env.test
          echo "CI=true" >> .env.test
          echo "GITHUB_ACTIONS=true" >> .env.test
          cat .env.test

      - name: Create required directories
        run: |
          mkdir -p public/uploads
          echo "üìÅ Created public/uploads directory"
          ls -la public/

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/instagram_db_test?schema=public

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/instagram_db_test?schema=public

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          CI: true
          GITHUB_ACTIONS: true
          DATABASE_URL: postgresql://postgres:password@localhost:5432/instagram_db_test?schema=public
          NEXTAUTH_SECRET: test-secret-key-for-testing
          NEXTAUTH_URL: http://localhost:3000
          NEXT_PUBLIC_APP_URL: http://localhost:3000
          UPLOAD_DIR: ./public/uploads

      - name: Run linting
        run: npm run lint --if-present

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/instagram_db_test?schema=public
          NEXTAUTH_SECRET: test-secret-key-for-testing
          NEXTAUTH_URL: http://localhost:3000
          NEXT_PUBLIC_APP_URL: http://localhost:3000

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=22

      - name: Extract metadata for Docker Hub
        id: meta-dockerhub
        uses: docker/metadata-action@v5
        with:
          images: esteban028/moodshot
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta-dockerhub.outputs.tags }}
          labels: ${{ steps.meta-dockerhub.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=22

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Deploy notification
        run: |
          echo "üöÄ Deployment would happen here"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "This is where you would deploy to your production environment"
